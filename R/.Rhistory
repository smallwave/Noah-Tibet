library(onlinePCA)
## Not run:
## Simulate data
n <- 1e4
d <- 500
q <- 10
x <- matrix(runif(n*d), n, d)
x <- x %*% diag(sqrt(12*(1:d)))
View(x)
# The eigenvalues of cov(x) are approximately 1, 2, ..., d
# and the corresponding eigenvectors are approximately
# the canonical basis of R^p
## PCA computation (from fastest to slowest)
system.time(pca1 <- batchpca(scale(x,scale=FALSE), q, byrow=TRUE))
system.time(pca2 <- batchpca(cov(x), q, type="covariance"))
system.time(pca3 <- eigen(cov(x),TRUE))
system.time(pca4 <- svd(scale(x/sqrt(n-1),scale=FALSE), 0, q))
system.time(pca5 <- prcomp(x))
pca1
system.time(pca1 <- batchpca(scale(x,scale=FALSE), 5, byrow=TRUE))
pca1
a <- rnorm(10, 50, 20)
b <- seq(10, 100, 10)
c <- seq(88, 10, -8)
d <- rep(seq(3, 16, 3), 2)
e <- rnorm(10, 61, 27)
a
my_table <- data.frame(a, b, c, d, e)
View(my_table)
pca <- princomp(my_table, cor=T)
a <- rnorm(10, 50, 20)
b <- seq(10, 100, 10)
c <- seq(88, 10, -8)
d <- rep(seq(3, 16, 3), 2)
e <- rnorm(10, 61, 27)
my_table <- data.frame(a, b, c, d, e)
pca <- princomp(my_table, cor=T)
biplot(pca) # same: plot(pca$scores[,1], pca$scores[,2])
pca
summary(pca)
class(pca$loadings)
pca$loadings
load <- with(pca, unclass(loadings))
View(load)
aload <- abs(load)
View(aload)
sweep(aload, 2, colSums(aload), "/")
A <-sweep(aload, 2, colSums(aload), "/")
A
Summary(A)
class(A)
apply(A, 2, sum, trim = .2)
apply(A, 1, sum, trim = .2)
colSums(sweep(aload, 2, colSums(aload), "/"))
pca2 <- prcomp(my_table, scale = TRUE)
pca2$rotation
aload <- abs(pca2$rotation)
sweep(aload, 2, colSums(aload), "/")
View(aload)
b<-sweep(aload, 2, colSums(aload), "/")
apply(b, 1, sum)
apply(b, 2, sum)
-0.08-0.57-0.19-0.07-0.1+0.36+0.38+0.15-0.38-0.62-0.67+0.62+0.05+0.68
c<-pca2$rotation
apply(c, 2, sum)
c
library(rgdal)
install.packages("rgdal")
library(rgdal)
filename <- "D:\\In\\MOD07_L2.A2012001.0310.006.2015055130244.hdf"
gdalinfo <- GDALinfo(filename, returnScaleOffset = FALSE)
filename
GDALinfo
library(rgdal)
library(sp)
library(rgdal)
# Extraction of metadata via `GDALinfo`
filename <- "D:\\In\\MOD07_L2.A2012001.0310.006.2015055130244.hdf"
gdalinfo <- GDALinfo(filename, returnScaleOffset = FALSE)
filename
filename <- "D:\\In\\MOD07_L2.A2012001.0310.006.2015055130244.hdf"
gdalinfo <- GDALinfo(filename, returnScaleOffset = FALSE)
gdalinfo <- GDALinfo(filename, returnScaleOffset = FALSE)
setwd("~/")
setwd("F:/worktemp/Permafrost(NOAH)/Code/R")
inputCvs <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChange.CSV"
#use over
# read Data
soilData <- read.csv(inputCvs, head=TRUE,sep=",")
View(soilData)
inputCvs <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChange.CSV"
#use over
# read Data
permafrostMap    <- read.csv(inputCvs, head=TRUE,sep=",")
permafrostMapDF  <- permafrostMap
View(permafrostMapDF)
inputCvs <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChange.CSV"
#use over
# read Data
permafrostMap    <- read.csv(inputCvs, head=TRUE,sep=",",check.names=FALSE)
permafrostMapDF  <- permafrostMap
View(permafrostMapDF)
View(permafrostMap)
inputCvs <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChange.CSV"
#use over
# read Data
permafrostMap    <- read.csv(inputCvs, head=TRUE,sep=",",check.names=FALSE)
View(permafrostMap)
library(plyr) # need for dataset ozone
install.packages("plyr")
permafrostYezr <- apply(permafrostMap,1,mean)
permafrostMap$PY <- apply(permafrostMap,1,mean)
View(permafrostMap)
inputCvs <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChange.CSV"
#use over
# read Data
permafrostMap    <- read.csv(inputCvs, head=TRUE,sep=",",check.names=FALSE)
permafrostMap    <- read.csv(inputCvs, head=TRUE,sep=",",check.names=FALSE)
View(permafrostMap)
debugSource('F:/worktemp/Permafrost(NOAH)/Code/R/Permafrost/Mapping/MapPermafrostChange.R')
x
nLen<-length(x)
x<-x[2:nLen-1]
nLen<-length(x)
x
debugSource('F:/worktemp/Permafrost(NOAH)/Code/R/Permafrost/Mapping/MapPermafrostChange.R')
x
x<-x[2:nLen]
nLen<-length(x)
x<-x[2:nLen]
x
debugSource('F:/worktemp/Permafrost(NOAH)/Code/R/Permafrost/Mapping/MapPermafrostChange.R')
x
idx
strName
nLen<-length(idx)
nLen
strName<-names(x)[idx[nLen]]
strName
debugSource('F:/worktemp/Permafrost(NOAH)/Code/R/Permafrost/Mapping/MapPermafrostChange.R')
strName
strName
strName
nLen
strName
strName
debugSource('F:/worktemp/Permafrost(NOAH)/Code/R/Permafrost/Mapping/MapPermafrostChange.R')
strName
strName
strName
strName
nLen
strName
permafrostMapYear
debugSource('F:/worktemp/Permafrost(NOAH)/Code/R/Permafrost/Mapping/MapPermafrostChange.R')
nLen
debugSource('F:/worktemp/Permafrost(NOAH)/Code/R/Permafrost/Mapping/MapPermafrostChange.R')
calpermafrostMapYear<-function(x)
{
nLen<-length(x)
idx<-which(x == 1, arr.ind = FALSE)
nLen<-length(idx)
strName<-names(x)[idx[nLen]]
permafrostMapYear<-as.integer(strName)
if(nLen <=0 )
{
permafrostMapYear<-NA
}
return(permafrostMapYear)
}
permafrostMap$PY <- apply(permafrostMap,1,calpermafrostMapYear)
View(permafrostMap)
inputCvs <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChange.CSV"
#use over
# read Data
permafrostMap    <- read.csv(inputCvs, head=TRUE,sep=",",check.names=FALSE)
# for
calpermafrostMapYear<-function(x)
# for
calpermafrostMapYear<-function(x)
{
nLen<-length(x)
idx<-which(x == 1, arr.ind = FALSE)
nLen<-length(idx)
strName<-names(x)[idx[nLen]]
permafrostMapYear<-as.integer(strName)
if(nLen <=0 )
{
permafrostMapYear<-NA
}
return(permafrostMapYear)
}
permafrostMap$PY <- apply(permafrostMap,1,calpermafrostMapYear)
View(permafrostMap)
inputCvs <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChange.CSV"
#use over
# read Data
permafrostMap    <- read.csv(inputCvs, head=TRUE,sep=",",check.names=FALSE)
# for
calpermafrostMapYear<-function(x)
{
nLen<-length(x)
idx<-which(x == 1, arr.ind = FALSE)
nLen<-length(idx)
strName<-names(x)[idx[nLen]]
permafrostMapYear<-as.integer(strName)
if(nLen <=0 )
{
permafrostMapYear<-NA
}
return(permafrostMapYear)
}
permafrostMap$PY <- apply(permafrostMap,1,calpermafrostMapYear)
View(permafrostMap)
outPutName <- paste("F:/worktemp/Permafrost(Change)/Work/Res/PermafrostMapChangePY.CSV.csv",sep='')
write.csv(permafrostMap, file = outPutName)
library(raster)
library(rgdal) # for spTransform
#************************************************************************************************
rasterFile <- "F:/worktemp/Permafrost(Change)/Work/Res/PermafrostChangePY.tif"
#************************************************************************************************
# 2  extract VALUE from raster
#************************************************************************************************
rasterData <- stack(rasterFile)
library(rgdal) # for spTransform
library(raster)
install.packages("raster")
library(raster)
install.packages("raster")
install.packages("raster")
install.packages("raster")
